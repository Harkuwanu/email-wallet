// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "./Types.sol";

interface IVerifier {
    // /// @notice Verify the proof to create an account
    // /// @notice Verifies email from a user that contains `accountSalt` in the email header
    // ///         where `accountSalt = `hash(fromAddress, accountSalt)`
    // /// @param emailDomain The domain of the user's email address
    // /// @param dkimPublicKeyHash The hash of the DKIM public key of `emailDomain`
    // /// @param emailNullifier The nullifier computed for the email
    // /// @param emailTimestamp The timestamp of the email
    // /// @param accountSalt Wallet used to create the account (hash of emailAddr and accountSalt)
    // /// @param psiPoint PSI point of the user for the relayer
    // /// @param proof Proof of email with above constraints
    // function verifyAccountCreationProof(
    //     string memory emailDomain,
    //     bytes32 dkimPublicKeyHash,
    //     bytes32 emailNullifier,
    //     uint256 emailTimestamp,
    //     bytes32 accountSalt,
    //     bytes memory psiPoint,
    //     bytes memory proof
    // ) external view returns (bool);

    /// @notice Verify the proof of email from user - used to verify EmailOp
    /// @notice Verify that relayer received an email where:
    ///         sender's email address domain is `emailDomain`,
    ///         sender's email address and relayer randmness derives `emailAddrPointer`,
    ///         is DKIM signed by public key whose hash is `dkimPublicKeyHash`,
    ///         the subject is same as `maskedSubject` with email address masked (if any),
    ///         and email address in subject is used to derive `recipientEmailAddrCommit`
    /// @param emailProof The email proof
    function verifyEmailProof(EmailProof calldata emailProof) external view returns (bool);

    /// @notice Verify the proof to claim and unclaimed to a recipient account
    /// @notice This verify that same email address is used in `recipientEmailAddrPointer` and `recipientEmailAddrCommit`
    /// @param recipientEmailAddrCommit The hash(emailAddress, randomness) where randomness was set by sender and passed to recipient relayer
    /// @param recipientAccountSalt Wallet salt for the recipient (claimer)
    /// @param proof ZK proof of the circuit
    function verifyClaimFundProof(
        bytes32 recipientEmailAddrCommit,
        bytes32 recipientAccountSalt,
        bytes memory proof
    ) external view returns (bool);

    /// @notice Verify the proof that the given PSI point and account salt are derived from the same email address.
    /// @param accountSalt Account salt of the user
    /// @param psiPoint PSI point of the user
    /// @param proof Proof generated by the circuit
    function verifyPsiPointProof(
        bytes32 accountSalt,
        bytes memory psiPoint,
        bytes memory proof
    ) external view returns (bool);

    /// @notice Verify the proof to announce the email address during Unclaim registration
    ///
    /// @param emailAddr Email address of the recipient
    /// @param rand Randomness used to create the email address commitment
    /// @param emailAddrCommit The commitment to the recipient email address
    /// @param proof Proof generated by the circuit
    function verifyAnnouncementProof(
        string memory emailAddr,
        bytes32 rand,
        bytes32 emailAddrCommit,
        bytes memory proof
    ) external view returns (bool);
}
